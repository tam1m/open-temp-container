name: Build, Sign, and Release XPI

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      EXT_ID: '{04d230ce-13df-4a51-a0ee-29789b5753e6}'
      ARTIFACTS_DIR: web-ext-artifacts
      SRC_DIR: src
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install web-ext
        run: npm install -g web-ext

      - name: Get version from manifest.json
        id: version
        run: |
          VERSION=$(jq -r .version $SRC_DIR/manifest.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get last version from update.json
        id: last_version
        run: |
          LAST_VERSION=$(jq -r ".[\"$EXT_ID\"].updates[0].version" update.json)
          echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_ENV
          echo "last_version=$LAST_VERSION" >> $GITHUB_OUTPUT

      - name: Check version bump
        run: |
          if [ "$VERSION" = "$LAST_VERSION" ]; then
            echo "Error: Version in manifest.json ($VERSION) has not changed from update.json ($LAST_VERSION). Please update manifest.json before running this workflow."
            exit 1
          fi

      - name: Lint extension
        run: web-ext lint --source-dir $SRC_DIR

      - name: Build extension
        run: |
          rm -f $ARTIFACTS_DIR/*.{zip,xpi}
          web-ext build --source-dir $SRC_DIR --artifacts-dir $ARTIFACTS_DIR

      - name: Sign extension
        run: |
          web-ext sign --api-key "${{ secrets.AMO_ISSUER }}" --api-secret "$${{ secrets.AMO_SECRET }}" --source-dir $SRC_DIR --artifacts-dir $ARTIFACTS_DIR --channel unlisted

      - name: Find signed XPI
        id: find_xpi
        run: |
          XPI_NAME="temp-containers-plus-$VERSION.xpi"
          SIGNED_XPI=$(find $ARTIFACTS_DIR -name "*.xpi" | head -n 1)
          if [ ! -f "$SIGNED_XPI" ]; then
            echo "Signed XPI not found!"; exit 1;
          fi
          cp "$SIGNED_XPI" "$XPI_NAME"
          echo "XPI_NAME=$XPI_NAME" >> $GITHUB_ENV
          echo "SIGNED_XPI=$XPI_NAME" >> $GITHUB_OUTPUT

      - name: Update update.json
        run: |
          RELEASE_NAME="v$VERSION"
          UPDATE_LINK="https://github.com/tam1m/open-temp-container/releases/download/$RELEASE_NAME/$XPI_NAME"
          jq --arg v "$VERSION" --arg url "$UPDATE_LINK" 'to_entries | map(if .key == env.EXT_ID then .value.updates[0].version = $v | .value.updates[0].update_link = $url | . end) | from_entries' update.json > update.tmp && mv update.tmp update.json

      - name: Commit and push update.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add update.json
          git commit -m "Update update.json for $VERSION" || echo "No changes to commit"
          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          files: ${{ env.XPI_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
